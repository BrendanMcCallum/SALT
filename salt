#!/bin/bash
################################################################
#
# SALT - [S]teadfasterX [A]ll-in-one [L]G [T]ool
#
# Copyright (C): 2017, steadfasterX <steadfastX|boun.cr>
#
# Main program for SALT
#
################################################################

# the vars for SALT
VARS="salt.vars"
source $VARS
[ $? -ne 0 ] && "ERROR: Missing requirement <$VARS>." && exit 3

# the functions for the lglaf GUI
FUNCS="salt.func"
source $FUNCS 
[ $? -ne 0 ] && "ERROR: Missing requirement <$FUNCS>." && exit 3

# check requirements:
[ ! -x $YAD ]&& F_ECHOLOG "ERROR: Missing requirement <yad>. Install YAD and try again!" && F_EXIT yad-missing 3

# check root:
ME=$(id -u)
if [ "$ME" -ne 0 ];then
    echo -e '\nI need more POWER! If asked now type in your sudo password to restart with root perms (wait 20s or press CTRL+C to abort)'
    sudo $0 &
    sleep 20s
    F_EXIT no-root-end-here
fi

# check the base:
if [ ! -d "$LAFPATH" ];then
    echo -e "\nERROR: Expected LG LAF NG here: $LAFPATH"
    F_MSG 400 "\n  ERROR!\n\n  Expected lglaf here:\n  ${LAFPATH}\n\n  but it is missing..\n\n  Should I download it for you now?" "--button=Yes:0 --button=Abort:1" 
    DLLAF=$?
    if [ "$DLLAF" -eq 0 ];then
        git clone $LAFGIT $LAFPATH
    else
        F_EXIT
    fi
else
    F_MSG 400 "\n  LGLAF found in:\n\n${LAFPATH}\n\n  Should I update it for you now (recommended)?" "--button=Yes:0 --button=Skip:1"
    UPDLAF=$?
    if [ "$UPDLAF" -eq 0 ];then
        (cd $LAFPATH && git pull && echo 100) | $FYAD --title="$YTITLE - syncing" --width=400 --progress --progress-text "syncing..." --pulsate --auto-close --auto-kill --button=Abort:1
    fi
fi
if [ ! -d "$KDZTOOLS" ];then
    F_MSG 400 "\n  ERROR!\n\n  Expected kdztools here:\n  ${KDZTOOLS}\n\n  but it is missing..\n\n  Should I download it for you now?" "--button=Yes:0 --button=Abort:1"
    DLKDZ=$?
    if [ "$DLKDZ" -eq 0 ];then
        git clone $KDZGIT $KDZTOOLS
    else
        F_EXIT
    fi
else
    F_MSG 400 "\n  KDZTOOLS found in:\n\n${KDZTOOLS}\n\n  Should I update it for you now (recommended)?" "--button=Yes:0 --button=Skip:1"
    UPDKDZ=$?
    if [ "$UPDKDZ" -eq 0 ];then
        (cd $KDZTOOLS && git pull && echo 100) || echo 100 | $FYAD --title="$YTITLE - syncing" --width=400 --progress --progress-text "syncing..." --pulsate --auto-close --auto-kill --button=Abort:0
    fi
fi


# main func
F_MAIN(){
DEVINF=$(F_GETINFO)
for i in $DEVINF;do
    F_ELOG "parsing $i"
    case ${i/:*/} in
        arb) DEVARB=${i/*:/};;
        battery_level) LGBATT=${i/*:/};;
        model_name) LGMODEL=${i/*:/};;
        device_sw_version) LGSWV=${i/*:/};;
        secure_device) LGSEC=${i/*:/};;
        device_factory_version) LGFACV=${i/*:/};;
        target_country) LGCOUNTRY=${i/*:/};;
        *) F_ELOG "unknown parameter: $i" ;;
    esac
done        

$FYAD --title="$YTITLE" --width=600 --text "\n  <b>$TFULLNAME</b>\n  is a replacement for the windows software LGUP (plus MANY more features!!)\n  and brought to you by <b>steadfasterX</b>.\n\n  $TNAME is based on:\n\t- the awesome <a href='https://github.com/Lekensteyn/lglaf'>LGLAF</a> code by Peter Wu\n\t- <a href='https://github.com/ehem/kdztools'>kdztools</a> by Elliott Mitchell\n\t- <b>MANY</b> enhancements by steadfasterX (including this GUI)\n\n  ${TNAME} sources: <a href='https://github.com/steadfasterX/salt'>$TNAME</a> | <a href='https://github.com/steadfasterX/lglaf'>Patched LGLAF</a> | <a href='https://github.com/steadfasterX/salt'>Patched kdztools</a>\n  $TNAME support: <a href='https://tinyurl.com/salty'>XDA thread</a>\n\n  The following comes directly from your device:\n  (no_device_found if no device connected)" \
    --form \
    --field="  Device model":RO $LGMODEL \
    --field="  Firmware":RO $LGSWV \
    --field="  Full firmware":RO $LGFACV \
    --field="  Country":RO $LGCOUNTRY \
    --field="  Secure device":RO $LGSEC \
    --field="  Battery level":RO $LGBATT \
    --field="  AntiRollback":RO $DEVARB \
    --field="  \nChoose your tool:":LBL \
    no_device_found no_device_found no_device_found no_device_found no_device_found no_device_found \
    --buttons-layout=spread \
    --button="Open a shell":3 \
    --button="Extract KDZ file":1 \
    --button="Flash KDZ file":2
UMODE=$?
} 

F_MAIN

# extract a kdz
if [ $UMODE -eq 1 ];then
    EXCHOICES=$($FYAD --title="$YTITLE - EXTRACT" --width=800 --always-print-result --text \
        "\n  This will extract any KDZ file for you with just a click\n" \
        --form \
        --field="KDZ file":FL --file-filter="KDZ files (*.kdz)| *.kdz *.KDZ"\
        --field="Target directory":DIR \
        --field=:LBL \
        --field="Extract useless userdata partition (leave unchecked if unsure)":CHK \
        --field="Extract useless cache partition (leave unchecked if unsure)":CHK \
        undef undef true false false\
        )
    F_ELOG "returned: $EXCHOICES"
    KDZFILE=$(echo "$EXCHOICES" | cut -d '|' -f 1)
    TARGDIR=$(echo "$EXCHOICES" | cut -d '|' -f 2)
    UDATA=$(echo "$EXCHOICES" | cut -d '|' -f 4)
    KCACHE=$(echo "$EXCHOICES" | cut -d '|' -f 5)
    
    F_ELOG "KDZFILE = $KDZFILE, TARGDIR = $TARGDIR, UDATA = $UDATA, KCACHE = $KCACHE"

    [ ! -f "$KDZFILE" ] && F_ERR "EXTRACTKDZ" 3 "$KDZFILE does not exists or is not readable!"
    [ ! -z "$TARGDIR" ] && [ ! -d "$TARGDIR" ] && echo mkdir -p $TARGDIR

    F_EXTRACTKDZ "$KDZFILE" "$TARGDIR" $UDATA $KCACHE

    # go back to main window
    #F_MAIN
fi

# flash a kdz
if [ $UMODE -eq 2 ];then
    FLCHOICES=$($FYAD --title="$YTITLE - FLASH" --always-print-result --width=800 --text "\n  When proceeding you accept that there is no guarantee for nothing - nowhere.\n  I do my best to avoid problems but we all are humans right?\n  You do this on your own responsibility and own risk no matter what.\n\n  Select a KDZ file to flash:" --form \
        --field="":FL --file-filter="KDZ files (*.kdz)| *.kdz *.KDZ" \
        --field="\n":LBL \
        --field="Factory Reset\t(if  *unchecked*  may result in bootloop)":CHK \
        --field="Model Check\t(if  *unchecked*  may result in HARD BRICK)":CHK \
        --field="ARB Check\t(if  *unchecked*  may result in HARD BRICK)":CHK \
        --field=:LBL \
        --field="TEST run\t\t(will  *not*  flash anything)":CHK \
        undef true true true true true true\
        --button="Agree &amp; Continue":0 \
        --button="Cancel":1 \
        )
    FLERR=$?
    [ $FLERR -ne 0 ] && F_EXIT flashing-select $FLERR 
 
    LGKDZ=$(echo "$FLCHOICES" | cut -d '|' -f 1)
    LGFR=$(echo "$FLCHOICES" | cut -d '|' -f 3)
    LGCHKMOD=$(echo "$FLCHOICES" | cut -d '|' -f 4)
    LGARB=$(echo "$FLCHOICES" | cut -d '|' -f 5)
    LGDRY=$(echo "$FLCHOICES" | cut -d '|' -f 7)

    F_ELOG "LGKDZ = $LGKDZ, LGFR = $LGFR, LGCHKMOD = $LGCHKMOD, LGARB = $LGARB, LGDRY = $LGDRY"

    [ ! -f "$LGKDZ" ] && F_ERR flashing-kdz-invalid 3 "\n  <b>ERROR</b>\n\n  The file\n  $LGKDZ\n  does not exist!\n"

    F_MSG 400 "\n  THIS IS NOT READY YET!!!\n"
    F_CHKDEVCON
    if [ $? -eq 0 ];then
        F_ELOG "device connected... going on!"
        F_FLASHKDZ "$LGKDZ" "$LGFR" "$LGCHKMOD" "$LGARB" "$LGDRY"
    else
        F_MSG 600 "\n  ERROR!\n\n  NO DEVICE CONNECTED?\n If you have connected your device ensure that it is in DOWNLOAD mode\n(not fastboot, not recovery, not booted Android)" "--button=Return:0"
    fi
    #[ $? -ne 0 ]&& F_MSG 400 "\n  Do you want to try to flash again?" "--button=Yes:0 --button=No:2"
fi

# open a shell
if [ $UMODE -eq 3 ];then
    F_CHKDEVCON
    if [ $? -eq 0 ];then
        F_ELOG "device connected... Opening shell now!"
         xterm -e "cd $LAFPATH && echo -e '\n*****************\nTYPE the word exit TO CLOSE THIS WINDOW\n*********************\n\n'; python2 auth.py; python2 lglaf.py"
    else
        F_MSG 600 "\n  ERROR!\n\n  NO DEVICE CONNECTED?\n If you have connected your device ensure that it is in DOWNLOAD mode\n(not fastboot, not recovery, not booted Android)" "--button=Return:0"
    fi
    #F_MAIN
fi

F_ELOG "all done"



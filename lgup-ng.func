##########################################################################
# global functions for the lglafgui
#
# include this with:
# source lglafguid.func
#
# Copyright (C): 2017, steadfasterX <steadfastX|boun.cr>
##########################################################################
VARS=lgup-ng.vars

source $VARS 
[ $? -ne 0 ]&& echo "ERROR: including $VARS" && exit 3

# echo output and save it in a log as well
F_ELOG(){
  # takes 1 argument
  # 1 => Message to log/echo (can handle \t and \n)
  
  echo -e "$1"
  # TODO: write log..
}

# print a message
F_MSG(){
    # takes 2 arguments
    #   
    #  1 => box width
    #  2 => message to show
    $YAD --center --width=$1 --title="$YTITLE" --text "$2"
}

# check errorcode + exit when not errorcode not as expected
F_ERR(){
  # takes 2-4 arguments
  #
  # mandantory:
  #   1 => the process initiating this function
  #   2 => the errorcode (usually $? in your call)
  # optional (4 requires at least an empty 3):
  #   3 => the message to show
  #   4 => the expected error code (if missing we expect 0)
  CALLER=$1
  ERRCODE=$2
  MSG="$3"
  EXPECTED=$4

  [ -z "$EXPECTED" ] && EXPECTED=0
  
  if [ -z "$CALLER" ]||[ -z "$ERRCODE" ];then
    F_ECHOLOG "Required argument missing in $FUNCNAME!"
    F_EXIT $FUNCNAME 3
  fi
  if [ "$ERRCODE" != "$EXPECTED" ];then
    F_ELOG "ERROR: $ERRCODE occurred in $CALLER (expected $EXPECTED, got $ERRCODE)"
    [ ! -z "$MSG" ] && F_MSG 400 "$MSG"
    F_EXIT "${CALLER}->${FUNCNAME}" 4
  else
    echo "OK: $CALLER"
  fi
}

# exit properly
F_EXIT(){
  # takes 2 arguments (mandantory)
  # 1 => the function or reason who calls the exit function
  # 2 => the exitcode to be used
  EREASON=$1
  ECODE=$2
  
  F_ELOG "EXIT: $EREASON with code $ECODE"
  
  # TODO (optional): do any other actions
  exit $ECODE
}

# get current phone data
F_GETINFO(){
    # takes no arguments

    python2 lglaf.py -c '!INFO GPRO \x08\x0b\0\0' \
    | python2 scripts/parse-props.py - \
    | egrep "(device_sw_version|model_name|secure_device|laf_sw_version|device_factory_version|target_country|battery_level)" | tr "\n" " " | tr -d "'"
}

# extract a KDZ
F_EXTRACTKDZ(){
    # takes XXXX arguments
    #
    #   1 => KDZ file name (full path)
    #   2 => Target directory
    #   3 => extract userdata
    #   4 => extract cache
    LGKDZ="$1"
    LGTARGET="$2"
    [ "$3" == "TRUE" ] && EARGS="--with-userdata"
    [ "$4" == "TRUE" ] && EARGS="$EARGS --with-cache"

    [ -z "$LGKDZ" -o ! -f "$LGKDZ" ] && F_ERR $FUNCNAME 3 "Internal error: empty LGKDZ or file not found"
    [ -z "$LGTARGET" -o ! -d "$LGTARGET" ] && F_ERR $FUNCNAME 3 "Internal error: empty LGTARGET or directory not found"

    ($KDZMGR --batch -x $LGKDZ -d $LGTARGET $EARGS 2>&1)  | $FYAD --title="$YTITLE - EXTRACT" --text-info "Extracting KDZ..." --listen --tail --height=600 --width=800 --wrap --fore=blue
}

# flash a KDZ
F_FLASHKDZ(){
    # takes XXXX arguments
    #
    #   1 => KDZ filename
    #   2 => Factory reset
    #   3 => Model check
    #   4 => ARB check
    #   5 => test mode

    LGKDZ="$1"
    LGFR="$2"
    LGCHKMOD="$3"
    LGARB="$4"
    LGDRY="$5"

    KDZTMP=/tmp
    # autoextract kdz without userdata and cache
    F_EXTRACTKDZ $LGKDZ $KDZTMP FALSE FALSE

    # test mode?
    if [ "$LGDRY" != "FALSE" ];then
        ($KDZMGR --batch --flash $KDZTMP/extracteddz --test 2>&1)  | $FYAD --title="$YTITLE - FLASH" --text-info "FLASHING KDZ..." --listen --tail --height=600 --width=800 --wrap --fore=blue
        FYAD --text "\n  TEST run finished\n\nDo you want to continue to FLASH in REAL now?" --button=FLASH:1 --button=Cancel=0
        [ $? -ne 1 ] && echo canceling.. && F_EXIT $FUNCNAME $?
    fi
    else
        FYAD --text "\n  NOW I'M READY!\n\nDo you want to continue to FLASH now?" --button=FLASH:1 --button=Cancel=0
        [ $? -ne 1 ] && echo canceling.. && F_EXIT $FUNCNAME $?
    fi
    
    # check device connection
    F_CHKDEVCON

    # FLASH
    ($KDZMGR --batch --flash $KDZTMP/extracteddz --test 2>&1)  | $FYAD --title="$YTITLE - FLASH" --text-info "FLASHING KDZ..." --listen --tail --height=600 --width=800 --wrap --fore=blue
}

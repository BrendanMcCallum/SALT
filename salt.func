##########################################################################
#
# SALT - [S]teadfasterX [A]ll-in-one [L]G [T]ool
#
# Copyright (C): 2017, steadfasterX <steadfastX|boun.cr>
#
# global functions for SALT
#
# include this with:
# source salt.func
#
##########################################################################
VARS=salt.vars

source $VARS 
[ $? -ne 0 ]&& echo "ERROR: including $VARS" && exit 3

# echo output and save it in a log as well
F_ELOG(){
  # takes 1 argument
  # 1 => Message to log/echo (can handle \t and \n)
  
  echo -e "$1"
  # TODO: write log..
}

# print a message
F_MSG(){
    # takes 2 arguments
    #   
    #  1 => box width
    #  2 => message to show
    # optional:
    #  3 => free args
    $YAD --center --width=$1 --title="$YTITLE" --text "$2" $3
}

# check errorcode + exit when not errorcode not as expected
F_ERR(){
  # takes 2-4 arguments
  #
  # mandantory:
  #   1 => the process initiating this function
  #   2 => the errorcode (usually $? in your call)
  # optional (4 requires at least an empty 3):
  #   3 => the message to show
  #   4 => the expected error code (if missing we expect 0)
  CALLER=$1
  ERRCODE=$2
  MSG="$3"
  EXPECTED=$4

  [ -z "$EXPECTED" ] && EXPECTED=0
  
  if [ -z "$CALLER" ]||[ -z "$ERRCODE" ];then
    F_ECHOLOG "Required argument missing in $FUNCNAME!"
    F_EXIT $FUNCNAME 3
  fi
  if [ "$ERRCODE" != "$EXPECTED" ];then
    F_ELOG "ERROR: $ERRCODE occurred in $CALLER (expected $EXPECTED, got $ERRCODE)"
    [ ! -z "$MSG" ] && F_MSG 400 "$MSG" '--button=Exit:0'
    F_EXIT "${CALLER}->${FUNCNAME}" 4
  else
    echo "OK: $CALLER"
  fi
}

# exit properly
F_EXIT(){
  # takes 2 arguments (mandantory)
  # 1 => the function or reason who calls the exit function
  # 2 => the exitcode to be used
  EREASON=$1
  ECODE=$2
  
  F_ELOG "EXIT: $EREASON with code $ECODE"
  
  # TODO (optional): do any other actions
  exit $ECODE
}

# get current phone data
F_GETINFO(){
    # takes no arguments

    python2 lglaf.py -c '!INFO GPRO \x08\x0b\0\0' \
    | python2 scripts/parse-props.py - \
    | egrep "(device_sw_version|model_name|secure_device|laf_sw_version|device_factory_version|target_country|battery_level)" | tr "\n" " " | tr -d "'"
}

# extract a KDZ
F_EXTRACTKDZ(){
    # takes XXXX arguments
    #
    #   1 => KDZ file name (full path)
    #   2 => Target directory
    #   3 => extract userdata
    #   4 => extract cache
    LGKDZ="$1"
    LGTARGET="$2"
    [ "$3" == "TRUE" ] && EARGS="--with-userdata"
    [ "$4" == "TRUE" ] && EARGS="$EARGS --with-cache"

    [ -z "$LGKDZ" -o ! -f "$LGKDZ" ] && F_ERR $FUNCNAME 3 "Internal error: empty LGKDZ or file not found"
    [ -z "$LGTARGET" -o ! -d "$LGTARGET" ] && F_ERR $FUNCNAME 3 "Internal error: empty LGTARGET or directory not found"

    ($KDZMGR --batch -x $LGKDZ -d $LGTARGET $EARGS 2>&1)  | $FYAD --title="$YTITLE - EXTRACT" --text-info --text "\n  <b><span color='#ff0000'>BE PATIENT! THE SCREEN REFRESHES EVERY MINUTE FIRST!\n  WAIT until you see the message: All done</span></b>\n" --listen --tail --height=600 --width=800 --wrap --fore=blue --button="Continue (wait until you see ALL DONE)":0
    EXERR=$?
    [ $EXERR -ne 0 ] && F_ERR $FUNCNAME $EXERR "ERROR occured or aborted by user!"
}

# check device for for antirollback bullshit (I'm still pissed off how a vendor is doing this! I mean HARDBRICK a phone ?? wtf LG?)
F_CDARB(){
    # takes no arguments
    #
    
    DEVARB=$(python2 $LAFPATH/partitions.py --skip-hello --dump - sbl1 | strings | grep "0 SW_ID" |cut -d " " -f 2 |tr -d "0")
    [ -z "$DEVARB" ] && DEVARB=0
    echo $DEVARB
}

# check local file for antirollback bullshit (I'm still pissed off how a vendor is doing this! I mean HARDBRICK a phone ?? wtf LG?)
F_CKARB(){
    # takes 1 argument
    #  
    # 1 => path to the sbl1 file to check

    KDZDIR=$1
    ARBFILE="$KDZDIR/sbl1.image"

    [ ! -f "$ARBFILE" ] && F_ERR $FUNCNAME 3 "\n  ERROR!\n\nMissing required file to check for ARB\n  (checked for: $ARBFILE)!"

    KDZARB=$(strings "$ARBFILE" | grep "0 SW_ID" |cut -d " " -f 2 |tr -d "0")
    [ -z "$KDZARB" ] && KDZARB=0
    echo $KDZARB
}


# flash a KDZ
F_FLASHKDZ(){
    # takes XXXX arguments
    #
    #   1 => KDZ filename
    #   2 => Factory reset
    #   3 => Model check
    #   4 => ARB check
    #   5 => test mode

    LGKDZ="$1"
    LGFR="$2"
    LGCHKMOD="$3"
    LGARB="$4"
    LGDRY="$5"

    # autoextract kdz without userdata and cache
    KDZTMP=/tmp
    F_EXTRACTKDZ $LGKDZ $KDZTMP FALSE FALSE

    # test mode?
    if [ "$LGDRY" != "FALSE" ];then
        ($KDZMGR --batch --flash $KDZTMP/extracteddz --test 2>&1)  | $FYAD --title="$YTITLE - FLASH" --text-info --text "\n  <b><span color='#009900'>FLASHING KDZ (TEST)...</span></b>\n" --listen --tail --height=600 --width=900 --wrap --fore=blue --button="Next":0
        $FYAD --text "\n  TEST run finished\n\nDo you want to continue to FLASH in REAL now?" --button=FLASH:1 --button=Cancel:0
        [ $? -ne 1 ] && echo canceling.. && F_EXIT $FUNCNAME $?
    else
        $FYAD --text "\n  NOW I'M READY!\n\nDo you want to continue to FLASH now?" --button=FLASH:1 --button=Cancel:0
        [ $? -ne 1 ] && echo canceling.. && F_EXIT $FUNCNAME $?
    fi

    # check device connection
    F_CHKDEVCON
   
    # recheck valid image files
    # TODO

    # check device model
    # TODO
    F_CHKMODEL
    
    # check ARB
    # TODO 
    ARBOK=0
    KARB=$(F_CKARB $KDZTMP)
    DARB=$(F_CDARB)
    F_ELOG "KARB: $KARB, DARB = $DARB"
    [ -z "$KARB" -o -z "$DARB" ] && F_ERR $FUNCNAME 3 "\n  ERROR!\n\n  Device ARB or KDZ ARB cannot be checked! ABORTED!!"
    [ "$KARB" -ge "$DARB" ] && F_ELOG "Device and KDZ ARB are compatible" && ARBOK=1
    [ "$ARBOK" -ne 1 ] && F_ERR $FUNCNAME 3 "\n  ERROR!\n\n  ARB is NOT compatible with your device! ABORTED!"

    # If all the above is fine: FLASH
    ($KDZMGR --batch --flash $KDZTMP/extracteddz --test 2>&1)  | $FYAD --title="$YTITLE - FLASH" --text-info --text "\n  <b><span color='#ff0000'>FLASHING KDZ (REAL)...</span></b>\n" --listen --tail --height=600 --width=900 --wrap --fore=blue --button="Close":0
}

# authenticate device
F_AUTH(){
    python2 $LAFPATH/auth.py
}

# check/ensure device is connected
F_CHKDEVCON(){
    # takes no argument
    F_AUTH
    python2 $LAFPATH/lglaf.py --skip-hello -c '!EXEC  uname -m\0'
}

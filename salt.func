##########################################################################
#
# SALT - [S]teadfasterX [A]ll-in-one [L]G [T]ool
#
# Copyright (C): 2017, steadfasterX <steadfastX|boun.cr>
#
# global functions for SALT
#
# include this with:
# source salt.func
#
##########################################################################
VARS=salt.vars

source $VARS 
[ $? -ne 0 ]&& echo "ERROR: including $VARS" && exit 3

# do not echo but write log entry
F_LOG(){
    # takes 1 argument
    # 1 => Message to log/echo (can handle \t and \n)
  
    echo -e "$(date '+%F %T'): $1" >> $LOG
}; export -f F_LOG

# echo output and save it in a log as well
F_ELOG(){
  # takes 1 argument
  # 1 => Message to log/echo (can handle \t and \n)
  
  echo -e "$1"
  # TODO: write log..

}; export -f F_ELOG

# print a message
F_MSG(){
    # takes 2 arguments
    #   
    #  1 => box width
    #  2 => message to show
    # optional:
    #  3 => free args
    $YAD --center --width=$1 --title="$YTITLE" --text "$2" $3
}; export -f F_MSG

# check errorcode + exit when not errorcode not as expected
F_ERR(){
  # takes 2-4 arguments
  #
  # mandantory:
  #   1 => the process initiating this function
  #   2 => the errorcode (usually $? in your call)
  # optional (4 requires at least an empty 3):
  #   3 => the message to show
  #   4 => the expected error code (if missing we expect 0)
  CALLER=$1
  ERRCODE=$2
  MSG="$3"
  EXPECTED=$4

  [ -z "$EXPECTED" ] && EXPECTED=0
  
  if [ -z "$CALLER" ]||[ -z "$ERRCODE" ];then
    F_ECHOLOG "Required argument missing in $FUNCNAME!"
    F_EXIT $FUNCNAME 3
  fi
  if [ "$ERRCODE" != "$EXPECTED" ];then
    F_ELOG "ERROR: $ERRCODE occurred in $CALLER (expected $EXPECTED, got $ERRCODE)"
    [ ! -z "$MSG" ] && F_MSG 400 "$MSG" '--button=Exit:0'
    F_EXIT "${CALLER}->${FUNCNAME}" 4
  else
    echo "OK: $CALLER"
  fi
}; export -f F_ERR

# exit properly
F_EXIT(){
  # takes 2 arguments (mandantory)
  # 1 => the function or reason who calls the exit function
  # 2 => the exitcode to be used
  EREASON=$1
  ECODE=$2
  
  F_ELOG "EXIT: $EREASON with code $ECODE"
  
  # TODO (optional): do any other actions
  exit $ECODE
}; export -f F_EXIT

# get current phone data
F_GETINFO(){
    # takes no arguments

    IARB=$(F_CDARB)
    echo "arb:$IARB" \
    && python2 $LAFPATH/lglaf.py -c '!INFO GPRO \x08\x0b\0\0' \
       | python2 $LAFPATH/scripts/parse-props.py - \
       | egrep "(device_sw_version|model_name|secure_device|laf_sw_version|device_factory_version|target_country|battery_level)" | tr "\n" " " | tr -d "'"
}; export -f F_GETINFO

# extract a KDZ
F_EXTRACTKDZ(){
    # takes XXXX arguments
    #
    #   1 => KDZ file name (full path)
    #   2 => Target directory
    #   3 => extract userdata
    #   4 => extract cache
    LGKDZ="$1"
    LGTARGET="$2"
    [ "$3" == "TRUE" ] && EARGS="--with-userdata"
    [ "$4" == "TRUE" ] && EARGS="$EARGS --with-cache"

    [ -z "$LGKDZ" -o ! -f "$LGKDZ" ] && F_ERR $FUNCNAME 3 "Internal error: empty LGKDZ or file not found"
    [ -z "$LGTARGET" -o ! -d "$LGTARGET" ] && F_ERR $FUNCNAME 3 "Internal error: empty LGTARGET or directory not found"

    ($KDZMGR --batch -x $LGKDZ -d $LGTARGET $EARGS 2>&1)  | $FYAD --title="$YTITLE - EXTRACT" --text-info --text "\n  <b><span color='#ff0000'>BE PATIENT! THE SCREEN REFRESHES EVERY MINUTE FIRST!\n  WAIT until you see the message: All done</span></b>\n" --listen --tail --height=600 --width=800 --wrap --fore=blue --button="Continue (wait until you see ALL DONE)":0
    EXERR=$?
    [ $EXERR -ne 0 ] && F_ERR $FUNCNAME $EXERR "ERROR occured or aborted by user!"
}; export -f F_EXTRACTKDZ

# check device for for antirollback bullshit (I'm still pissed off how a vendor is doing this! I mean HARDBRICK a phone ?? wtf LG?)
F_CDARB(){
    # takes no arguments
    #
    
    DEVARB=$(python2 $LAFPATH/partitions.py --skip-hello --dump - sbl1 | strings | grep "0 SW_ID" |cut -d " " -f 2 |tr -d "0")
    [ -z "$DEVARB" ] && DEVARB=0
    echo $DEVARB
}; export -f F_CDARB

# check local file for antirollback bullshit (I'm still pissed off how a vendor is doing this! I mean HARDBRICK a phone ?? wtf LG?)
F_CKARB(){
    # takes 1 argument
    #  
    # 1 => path to the sbl1 file to check

    KDZDIR=$1
    ARBFILE="$KDZDIR/sbl1.image"

    [ ! -f "$ARBFILE" ] && F_ERR $FUNCNAME 3 "\n  ERROR!\n\nMissing required file to check for ARB\n  (checked for: $ARBFILE)!"

    KDZARB=$(strings "$ARBFILE" | grep "0 SW_ID" |cut -d " " -f 2 |tr -d "0")
    [ -z "$KDZARB" ] && KDZARB=0
    echo $KDZARB
}; export -f F_CKARB

# check device model
F_CHKMODEL(){
    # takes 1 argument
    #
    # 1 => KDZFILE to compare

    KFILE="$1"
    [ -z "$KFILE" -o ! -f "$KFILE" ] && F_ERR $FUNCNAME 3 "\n  ERROR!\n\n  KFILE missing for compare!"

    DEVINF=$(F_GETINFO)
    for i in $DEVINF;do
        case ${i/:*/} in
           model_name) LGMODEL=${i/*:/};;
        esac
    done
    KDZMODEL=$(dd if=$KFILE bs=512 count=10000 2>&1| strings | egrep -m1 'LG-[L|H|V]')
    if [ -z "$KDZMODEL" ] ;then
        #F_MSG 400 "\n  ERROR!\n\n  Cannot determine model in KDZ file.."
        RES="${LGMODEL}:unknown"
    else
        #F_MSG 400 "\n   Check completed.\n\n\tDevice model:\t$LGMODEL\n\tKDZ is for:\t$KDZMODEL\n"
        #if [ "$KDZMODEL" != "$LGMODEL" ];then
        #    F_MSG 400 "\n  Device and KDZ file seems to be <b>NOT</b> compatible!\n  If you continue this can result in a HARD BRICK!" "--button='I know what 9008 mode is':0 --button='ABORT':1"
        #    [ $? -ne 0 ] && F_ERR $FUNCNAME 3 "Aborted by user"
        #fi
        RES="${LGMODEL}:${KDZMODEL}"
    fi
    echo $RES
} ; export -f F_CHKMODEL

# flash a KDZ
F_FLASHKDZ(){
    # takes XXXX arguments
    #
    #   1 => KDZ filename
    #   2 => Factory reset
    #   3 => Model check
    #   4 => ARB check
    #   5 => test mode

    LGKDZ="$1"
    LGFR="$2"
    LGCHKMOD="$3"
    LGARB="$4"
    LGDRY="$5"

    # autoextract kdz without userdata and cache
    KDZTMP=/tmp
    F_EXTRACTKDZ $LGKDZ $KDZTMP FALSE FALSE

    # test mode?
    if [ "$LGDRY" != "FALSE" ];then
        ($KDZMGR --batch --flash $KDZTMP/extracteddz --test 2>&1)  | $FYAD --title="$YTITLE - FLASH" --text-info --text "\n  <b><span color='#009900'>FLASHING KDZ (TEST)...</span></b>\n" --listen --tail --height=600 --width=900 --wrap --fore=blue --button="Next":0
        $FYAD --title="$YTITLE - FLASH" --text "\n  TEST run finished\n\n  Do you want to continue to FLASH in REAL now?" --button=FLASH:1 --button=Cancel:0
        [ $? -ne 1 ] && echo canceling.. && F_EXIT $FUNCNAME $?
    #else
    #    $FYAD --title="$YTITLE - FLASH" --text "\n  NOW I'M READY!\n\n  Do you want to continue to FLASH now?" --button=FLASH:1 --button=Cancel:0
    #    [ $? -ne 1 ] && echo canceling.. && F_EXIT $FUNCNAME $?
    fi

    # check device connection
    F_CHKDEVCON
   
    # recheck valid image files
    # TODO

    # check device model
    CHKMRES=$(F_CHKMODEL "$LGKDZ")
    
    # check ARB
    ARBOK=0
    KARB=$(F_CKARB $KDZTMP/extracteddz)
    DARB=$(F_CDARB)
    F_ELOG "KARB: $KARB, DARB: $DARB"
    # verify the internal functions do not generate crap
    [ -z "$KARB" -o -z "$DARB" ] && F_ERR $FUNCNAME 3 "\n  ERROR!\n\n  Device ARB or KDZ ARB cannot be checked! ABORTED!!"
    # verify ARB compat
    [ "$KARB" -ge "$DARB" ] && F_ELOG "Device and KDZ ARB are compatible" && ARBOK=1
    # a bulletproof method to avoid issues with any of the above (e.g. when KARB or DARB are not digits etc)
    [ "$ARBOK" -ne 1 ] && F_ERR $FUNCNAME 3 "\n  ERROR!\n\n  ARB is NOT compatible with your device! ABORTED!"

    # manual verification by the user
    if [ -z "${CHKMRES/*:}" ] || [ -z "${CHKMRES/:*}" ]|| [ "${CHKMRES/:*}" == "unknown" ] || [ "${CHKMRES/*:}" != "${CHKMRES/:*}" ];then
        FYAD --title="$YTITLE - CHECKUP" --text "\n  WARNING: <b><span color='#ff0000'>KDZ file and device information does not match!</span></b>\n  Device model:\t${CHKMRES/*:}\n  KDZ is for:\t\t${CHKMRES/:*}\n\n  ARB of your device <b>seems</b> to be compatible with the KDZ file\n  Device:\t$DARB\n  KDZ:\t$KARB\n\n  You can doublecheck <a href='http://tinyurl.com/antirollg4'>here</a>\n\n  Do you really want to continue and so FLASH now?" --button="Flash (may HARD BRICK)":0 --button=Cancel:1
    else
        $FYAD --title="$YTITLE - CHECKUP" --text "\n  KDZ <b>file and device</b> information match\n  Device model:\t${CHKMRES/*:}\n  KDZ is for:\t\t${CHKMRES/:*}\n\n  ARB of your device <b>seems</b> to be compatible with the KDZ file\n  Device:\t$DARB\n  KDZ:\t$KARB\n  You can doublecheck ARB <a href='http://tinyurl.com/antirollg4'>here</a>\n\n  Do you really want to continue and so FLASH now?" --button="Flash (on your own risk)":0 --button=Cancel:1
    fi
    # abort when needed
    [ $? -ne 0 ] && F_ERR $FUNCNAME 3 "\n  Aborted on user check verification"

    # If all the above is fine: FLASH
    F_FLASHPART "$KDZTMP/extracteddz"
    #($KDZMGR --batch --flash $KDZTMP/extracteddz --test 2>&1)  | $FYAD --title="$YTITLE - FLASH" --text-info --text "\n  <b><span color='#ff0000'>FLASHING KDZ (REAL)...</span></b>\n" --listen --tail --height=600 --width=900 --wrap --fore=blue --button="Close":0
}; export -f F_FLASHKDZ

# choose and flash partitions from a backup or extracted KDZ
F_FLASHPART(){
    # takes 1 optional argument
    #
    # 1 => image files path

    if [ -z "$1" ];then
        AIMGDIR=$($FYAD --width=600 --title="$YTITLE - FOLDER" --form \
                    --field="  Select the source folder":DIR \
                  $HOME)
        IMGDIR=$(echo $AIMGDIR|cut -d '|' -f1)
    else
        IMGDIR="$1"
    fi

    [ ! -d "$IMGDIR" ] && F_ERR $FUNCNAME 3 "\n  ERROR!\n\n Folder \n\n  $IMGDIR\n\n  does not exists?!"
    
    # create a list of *.image files and let the user choose
    IMGFILES=$(for ifile in $(find "$IMGDIR" -maxdepth 1 -type f -name *.bin -or -name *.img -or -name *.image | tr " " "_");do echo "${ifile##*/}";done | tr "\n" " ")

    F_ELOG "($FUNCNAME) image files: $IMGFILES"

    # give proper default choice for what to flash and what not
    unset IRES
    for f in $IMGFILES;do
        AVIMG="${f/:*}"
        APART=$(echo "${f/*:}" | sed 's/\.image//g;s/\.img//g;s/\.bin//g')
        case $APART in
            grow|cache|userdata|modemst1|modemst2|persist|persistent|drm)
              if [ -z "$IRES" ];then IRES="false\n${AVIMG}\n${APART}\nunneeded"; else IRES="$IRES false\n${AVIMG}\n${APART}\nunneeded" ;fi
            ;;
            rpm|rpmbak|tz|tzbak|sdi|sdibak|aboot|abootbak|pmic|pmicbak|hyp|hypbak|sbl1|sbl1bak)
              if [ -z "$IRES" ];then IRES="true\n${AVIMG}\n${APART}\nbootloader"; else IRES="$IRES true\n${AVIMG}\n${APART}\nbootloader" ;fi
            ;;
            misc|devinfo)
              if [ -z "$IRES" ];then 
                IRES="false\n${AVIMG}\n${APART}</span>\n<span\tcolor='#ff0000'>dangerous</span>"
              else 
                IRES="$IRES false\n${AVIMG}\n${APART}\n<span\tcolor='#ff0000'>dangerous</span>"
              fi
            ;;
            *)
            if [ -z "$IRES" ];then
                IRES="true\n${AVIMG}\n${APART}\n<span\tcolor='#558000'>safe</span>"
            else
                IRES="$IRES true\n${AVIMG}\n${APART}\n<span\tcolor='#558000'>safe</span>"
            fi
            ;;
        esac
    done

    F_ELOG "($FUNCNAME) created yad list: $IRES"

    CHOOSENP=$(for files in $IRES;do echo -e "$files" ;done \
                | $FYAD --height=800 --width=600 --title="$YTITLE - FOLDER" --text "\n  Select the partitions you want to flash\n  (the RECOMMENDED partitions to flash are CHECKED already!)\n" --list --checklist \
                        --column="Flash":CHK --column="Image File":TXT --column="Target partition" --column="Type" --listen --no-selection \
                        --button=FLASH:0 --button=Abort:1 |cut -d "|" -f2-3 | tr "|" ":" )
    [ $? -ne 0 ] && F_ERR $FUNCNAME 0 "No partition?"

    F_ELOG "choosen partitions: $CHOOSENP"

    # create progress bars dynamically
    for bar in $CHOOSENP; do
        BARNAME="${bar/*:}":NORM
	if [ -z "$YADBARS" ];then
        	YADBARS="--bar $BARNAME"
	else
		YADBARS="$YADBARS --bar=$BARNAME"
	fi
    done
 
    # FLASH
    CNT=0
    for img in $CHOOSENP; do
        FFILE="$IMGDIR/${img/:*}"
        FPART=${img/*:}
        F_ELOG "flashing: $FFILE to $FPART"

       	echo "5"
	PBAR=10
	# inform yad which partition we flash
	echo "#flashing: $FPART"

	# fake the progress bar as lglaf do not have it
	while [ $PBAR -le 90 ];do echo "$PBAR"; PBAR=$((PBAR+1)); sleep 5s ;done &
	PBLOOP=$!
        python2 $LAFPATH/partitions.py --restore "$FFILE" $FPART 2>&1 | sed "s/^/#$FPART: /g"
	FLASHERR=$?
	if [ $FLASHERR -eq 0 ];then
		kill $PBLOOP && echo "100"
	else
		echo "# $FPART: FAILED"
		kill $PBLOOP && F_ERR $FUNCNAME 4 "\n  ERROR!\n\n  DO NOT REBOOT YOUR DEVICE!\n  FLASHING PROBLEM OCCURED!!!\n  while flashing:\n\n  <b>$FPART</b>" 
	fi
    done | $FYAD --title="$YTITLE - FLASHING" --text="\n  <b>SALT is now flashing...</b>\n  (if the progress bar does NOT get up to 100%: DO NOT REBOOT THE DEVICE!)\n\n" --width 900 --progress $YADBARS --button='Close (WAIT until all is flashed)':1 --auto-kill
}; export -f F_FLASHPART

# authenticate device
F_AUTH(){
    python2 $LAFPATH/auth.py
}; export -f F_AUTH

# check/ensure device is connected
F_CHKDEVCON(){
    # takes no argument
    F_AUTH
    python2 $LAFPATH/lglaf.py --skip-hello -c '!EXEC  uname -m\0'
}; export -f F_CHKDEVCON

# open a shell
F_SHELL(){
    # takes no arguments
    
    F_ELOG $FUNCNAME started

    F_CHKDEVCON
    if [ $? -eq 0 ];then
        F_ELOG "device connected... Opening shell now!"
         xterm -e "cd $LAFPATH && echo -e '\n*****************\nTYPE the word exit TO CLOSE THIS WINDOW\n*********************\n\n'; python2 $LAFPATH/auth.py; python2 $LAFPATH/lglaf.py"
    else
        F_MSG 600 "\n  ERROR!\n\n  NO DEVICE CONNECTED?\n If you have connected your device ensure that it is in DOWNLOAD mode\n(not fastboot, not recovery, not booted Android)" "--button=Return:0"
    fi
    F_ELOG $FUNCNAME ended
}; export -f F_SHELL

# start dialog for kdz extract
F_STARTKDZ(){
    # takes no arguments
    F_ELOG $FUNCNAME started

    EXCHOICES=$($FYAD --title="$YTITLE - EXTRACT" --width=800 --always-print-result --text \
        "\n  This will extract any KDZ file for you with just a click\n" \
        --form \
        --field="KDZ file":FL --file-filter="KDZ files (*.kdz)| *.kdz *.KDZ"\
        --field="Target directory":DIR \
        --field=:LBL \
        --field="Extract useless userdata partition (leave unchecked if unsure)":CHK \
        --field="Extract useless cache partition (leave unchecked if unsure)":CHK \
        undef undef true false false\
        )
    F_ELOG "returned: $EXCHOICES"
    KDZFILE=$(echo "$EXCHOICES" | cut -d '|' -f 1)
    TARGDIR=$(echo "$EXCHOICES" | cut -d '|' -f 2)
    UDATA=$(echo "$EXCHOICES" | cut -d '|' -f 4)
    KCACHE=$(echo "$EXCHOICES" | cut -d '|' -f 5)
    
    F_ELOG "KDZFILE = $KDZFILE, TARGDIR = $TARGDIR, UDATA = $UDATA, KCACHE = $KCACHE"

    [ ! -f "$KDZFILE" ] && F_ERR "EXTRACTKDZ" 3 "$KDZFILE does not exists or is not readable!"
    [ ! -z "$TARGDIR" ] && [ ! -d "$TARGDIR" ] && echo mkdir -p $TARGDIR

    F_EXTRACTKDZ "$KDZFILE" "$TARGDIR" $UDATA $KCACHE

    F_ELOG $FUNCNAME ended
};export -f F_STARTKDZ

# Update everything!
F_UPDATE(){
    # takes no arguments
    #

    CNT=0
    for u in $KDZTOOLS $LAFPATH $SALTPATH; do 
        CNT=$((CNT+1))
        echo "${CNT}:5"
        cd $u 
        echo "${CNT}:10"
        git pull 2>&1 | sed "s/^/${CNT}:#/g"
        test ${PIPESTATUS[0]} -eq 0 && echo "${CNT}:100"
    done | $FYAD --title="$YTITLE - UPDATING" --text="\n  <b>Be patient while SALT freshen up...</b>\n  (if a progress bar do NOT get to 100% a manual update is required)\n\n" --width 800 --multi-progress --bar="SALT codebase":norm --bar="LGLAF codebase":norm --bar="kdztools codebase":norm --button=Close
}; export -f F_UPDATE

